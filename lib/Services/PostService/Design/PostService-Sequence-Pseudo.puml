@startuml PostService-Sequence-Pseudo
!define POSITIVERESPONSE 90EE90
!define NEGATIVEERESPONSE EFBBBB
!define NUETRALRESPONSE F2DC79

skinparam sequence{
    ParticipantBackgroundColor #A7BEAE
    LifeLineBackgroundColor #E7E8D1
    LifeLineBorderColor #2C5F2D
    ActorBackgroundColor #FC766AFF
    ActorBorderColor #FC766AFF
    ArrowColor #B85042
    ArrowFontColor #234E70
}

title 'PostService - getAllPosts()'
autonumber 1
hide footbox
Caller -> PostService: Invokes **getAllPosts**
alt #POSITIVERESPONSE (TRY)
activate Caller
activate PostService
PostService -> Server: Make the http get call from the url and pass the **authkey** in header
activate Server 
Server --> PostService: Returns **List<PostBO>**
deactivate Server
PostService -> PostService: Store the response in **response** variable.
PostService -> PostService: Invoke **getApiServiceResult()** by using **response** and store the value in **result**
PostService --> Caller: Returns **ServiceResult**
else #NEGATIVEERESPONSE on FormatException
PostService --> Caller: Returns ServiceResult and assign the statuscode as **Forbidden** and message as **"The type of data got is incorrect!"**
else #NEGATIVEERESPONSE on SocketException
PostService --> Caller: Returns ServiceResult and assign the statuscode as **NetworkFailure** and message as **"There is not internet connection!"** and content as **empty**
else #NEGATIVEERESPONSE (CATCH)
PostService -> PostService: Write log exceptions
PostService --> Caller:  Returns ServiceResult and assign the statuscode **SystemException** and message as **exception**.
deactivate PostService
deactivate Caller
end

==PSEUDOCODE==
hnote across
**TRY**

    EXECUTE **_dio.get()** with the **url** as "http://dummyjson.com/getAllPosts" and header's key as **authkey** with value as **123**

    STORE the response in the variable **response**

    STORE the result of EXECUTING the method **getApiServiceResult()** by passing **result** as parameter and **type** as type of **List<UserBO>**

    RETURNS **ServiceResult**

**ON FORMATEXCEPTION**

    RETURNS ServiceResult and assign the **statuscode as Forbidden** and **message as "The type of data got is incorrect!"**

**ON SOCKETEXCEPTION**

    RETURNS ServiceResult and assign the **statuscode as NetworkFailure** and **message as "There is not internet connection!"** and **content as empty**
    
**CATCH**

    RETURNS ServiceResult and assign the statuscode **SystemException** and message as **exception**

endnote

newpage 'PostService - createNewPost(postBO:PostBO)'
autonumber 1
Hide footbox
Caller -> PostService: Invoke **createNewPost(postBO:PostBO)**
alt #POSITIVERESPONSE try
activate Caller
activate PostService
PostService -> Server: Make the http post call and pass PostBO from the url and pass the **authkey** in header
activate Server 
Server --> PostService: Returns **response**
deactivate Server
PostService -> PostService: Store the response in **response** variable.
PostService -> PostService: Invoke **getApiServiceResult()** by using **response** 
PostService --> Caller: Returns **ServiceResult**
else #NEGATIVEERESPONSE on FormatException
PostService --> Caller: Returns ServiceResult and assign the statuscode as **Forbidden** and message as "The type of data got is incorrect!"
else #NEGATIVEERESPONSE on SocketException
PostService --> Caller: Returns ServiceResult and assign the statuscode as **NetworkFailure** and message as "There is not internet connection!" and content as empty
else #efbbbb Catch 
PostService -> PostService: Write log exceptions
PostService --> Caller:  Returns ServiceResult and assign the statuscode **SystemException** and message as **exception**.
deactivate Caller
deactivate PostService
end

==PSEUDOCODE==
hnote across
**TRY**

    EXECUTE **_dio.get()** with the **url** as "http://dummyjson.com/createNewPost" and header's key as **authkey** with value as **123**

    STORE the response in the variable **response**

    STORE the result of EXECUTING the method **getApiServiceResult()** by passing **result** as parameter and **type** as type of **bool**

    RETURNS **ServiceResult**

**ON FORMATEXCEPTION**

    RETURNS ServiceResult and assign the  **statuscode as Forbidden** and **message as "The type of data got is incorrect!"**

**ON SOCKETEXCEPTION**

    RETURNS ServiceResult and assign the **statuscode as NetworkFailure** and **message as "There is not internet connection!"** and **content as empty**
    
**CATCH**

    RETURNS ServiceResult and assign the statuscode **SystemException** and message as **exception**

endnote

@enduml